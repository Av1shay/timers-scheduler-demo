// Code generated by ent, DO NOT EDIT.

package task

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDueDate holds the string denoting the duedate field in the database.
	FieldDueDate = "due_date"
	// FieldWebhookUrl holds the string denoting the webhookurl field in the database.
	FieldWebhookUrl = "webhook_url"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeHistories holds the string denoting the histories edge name in mutations.
	EdgeHistories = "histories"
	// Table holds the table name of the task in the database.
	Table = "tasks"
	// HistoriesTable is the table that holds the histories relation/edge.
	HistoriesTable = "task_histories"
	// HistoriesInverseTable is the table name for the TaskHistory entity.
	// It exists in this package in order to avoid circular dependency with the "taskhistory" package.
	HistoriesInverseTable = "task_histories"
	// HistoriesColumn is the table column denoting the histories relation/edge.
	HistoriesColumn = "task_histories"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldDueDate,
	FieldWebhookUrl,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending Status = "pending"
	StatusRunning Status = "running"
	StatusDone    Status = "done"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusRunning, StatusDone:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for status field: %q", s)
	}
}
