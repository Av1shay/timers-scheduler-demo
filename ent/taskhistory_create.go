// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/Av1shay/timers-scheduler-demo/ent/task"
	"github.com/Av1shay/timers-scheduler-demo/ent/taskhistory"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskHistoryCreate is the builder for creating a TaskHistory entity.
type TaskHistoryCreate struct {
	config
	mutation *TaskHistoryMutation
	hooks    []Hook
}

// SetError sets the "error" field.
func (thc *TaskHistoryCreate) SetError(s string) *TaskHistoryCreate {
	thc.mutation.SetError(s)
	return thc
}

// SetNillableError sets the "error" field if the given value is not nil.
func (thc *TaskHistoryCreate) SetNillableError(s *string) *TaskHistoryCreate {
	if s != nil {
		thc.SetError(*s)
	}
	return thc
}

// SetCreatedAt sets the "created_at" field.
func (thc *TaskHistoryCreate) SetCreatedAt(t time.Time) *TaskHistoryCreate {
	thc.mutation.SetCreatedAt(t)
	return thc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (thc *TaskHistoryCreate) SetNillableCreatedAt(t *time.Time) *TaskHistoryCreate {
	if t != nil {
		thc.SetCreatedAt(*t)
	}
	return thc
}

// SetUpdatedAt sets the "updated_at" field.
func (thc *TaskHistoryCreate) SetUpdatedAt(t time.Time) *TaskHistoryCreate {
	thc.mutation.SetUpdatedAt(t)
	return thc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (thc *TaskHistoryCreate) SetNillableUpdatedAt(t *time.Time) *TaskHistoryCreate {
	if t != nil {
		thc.SetUpdatedAt(*t)
	}
	return thc
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (thc *TaskHistoryCreate) SetTaskID(id int) *TaskHistoryCreate {
	thc.mutation.SetTaskID(id)
	return thc
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (thc *TaskHistoryCreate) SetNillableTaskID(id *int) *TaskHistoryCreate {
	if id != nil {
		thc = thc.SetTaskID(*id)
	}
	return thc
}

// SetTask sets the "task" edge to the Task entity.
func (thc *TaskHistoryCreate) SetTask(t *Task) *TaskHistoryCreate {
	return thc.SetTaskID(t.ID)
}

// Mutation returns the TaskHistoryMutation object of the builder.
func (thc *TaskHistoryCreate) Mutation() *TaskHistoryMutation {
	return thc.mutation
}

// Save creates the TaskHistory in the database.
func (thc *TaskHistoryCreate) Save(ctx context.Context) (*TaskHistory, error) {
	var (
		err  error
		node *TaskHistory
	)
	thc.defaults()
	if len(thc.hooks) == 0 {
		if err = thc.check(); err != nil {
			return nil, err
		}
		node, err = thc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = thc.check(); err != nil {
				return nil, err
			}
			thc.mutation = mutation
			if node, err = thc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(thc.hooks) - 1; i >= 0; i-- {
			if thc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = thc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, thc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TaskHistory)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TaskHistoryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (thc *TaskHistoryCreate) SaveX(ctx context.Context) *TaskHistory {
	v, err := thc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (thc *TaskHistoryCreate) Exec(ctx context.Context) error {
	_, err := thc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thc *TaskHistoryCreate) ExecX(ctx context.Context) {
	if err := thc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (thc *TaskHistoryCreate) defaults() {
	if _, ok := thc.mutation.CreatedAt(); !ok {
		v := taskhistory.DefaultCreatedAt()
		thc.mutation.SetCreatedAt(v)
	}
	if _, ok := thc.mutation.UpdatedAt(); !ok {
		v := taskhistory.DefaultUpdatedAt()
		thc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (thc *TaskHistoryCreate) check() error {
	if _, ok := thc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TaskHistory.created_at"`)}
	}
	if _, ok := thc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TaskHistory.updated_at"`)}
	}
	return nil
}

func (thc *TaskHistoryCreate) sqlSave(ctx context.Context) (*TaskHistory, error) {
	_node, _spec := thc.createSpec()
	if err := sqlgraph.CreateNode(ctx, thc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (thc *TaskHistoryCreate) createSpec() (*TaskHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskHistory{config: thc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: taskhistory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: taskhistory.FieldID,
			},
		}
	)
	if value, ok := thc.mutation.Error(); ok {
		_spec.SetField(taskhistory.FieldError, field.TypeString, value)
		_node.Error = &value
	}
	if value, ok := thc.mutation.CreatedAt(); ok {
		_spec.SetField(taskhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := thc.mutation.UpdatedAt(); ok {
		_spec.SetField(taskhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := thc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskhistory.TaskTable,
			Columns: []string{taskhistory.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.task_histories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskHistoryCreateBulk is the builder for creating many TaskHistory entities in bulk.
type TaskHistoryCreateBulk struct {
	config
	builders []*TaskHistoryCreate
}

// Save creates the TaskHistory entities in the database.
func (thcb *TaskHistoryCreateBulk) Save(ctx context.Context) ([]*TaskHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(thcb.builders))
	nodes := make([]*TaskHistory, len(thcb.builders))
	mutators := make([]Mutator, len(thcb.builders))
	for i := range thcb.builders {
		func(i int, root context.Context) {
			builder := thcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, thcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, thcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, thcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (thcb *TaskHistoryCreateBulk) SaveX(ctx context.Context) []*TaskHistory {
	v, err := thcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (thcb *TaskHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := thcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thcb *TaskHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := thcb.Exec(ctx); err != nil {
		panic(err)
	}
}
