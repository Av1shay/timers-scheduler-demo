// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/Av1shay/timers-scheduler-demo/ent/predicate"
	"github.com/Av1shay/timers-scheduler-demo/ent/task"
	"github.com/Av1shay/timers-scheduler-demo/ent/taskhistory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskHistoryUpdate is the builder for updating TaskHistory entities.
type TaskHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *TaskHistoryMutation
}

// Where appends a list predicates to the TaskHistoryUpdate builder.
func (thu *TaskHistoryUpdate) Where(ps ...predicate.TaskHistory) *TaskHistoryUpdate {
	thu.mutation.Where(ps...)
	return thu
}

// SetError sets the "error" field.
func (thu *TaskHistoryUpdate) SetError(s string) *TaskHistoryUpdate {
	thu.mutation.SetError(s)
	return thu
}

// SetNillableError sets the "error" field if the given value is not nil.
func (thu *TaskHistoryUpdate) SetNillableError(s *string) *TaskHistoryUpdate {
	if s != nil {
		thu.SetError(*s)
	}
	return thu
}

// ClearError clears the value of the "error" field.
func (thu *TaskHistoryUpdate) ClearError() *TaskHistoryUpdate {
	thu.mutation.ClearError()
	return thu
}

// SetCreatedAt sets the "created_at" field.
func (thu *TaskHistoryUpdate) SetCreatedAt(t time.Time) *TaskHistoryUpdate {
	thu.mutation.SetCreatedAt(t)
	return thu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (thu *TaskHistoryUpdate) SetNillableCreatedAt(t *time.Time) *TaskHistoryUpdate {
	if t != nil {
		thu.SetCreatedAt(*t)
	}
	return thu
}

// SetUpdatedAt sets the "updated_at" field.
func (thu *TaskHistoryUpdate) SetUpdatedAt(t time.Time) *TaskHistoryUpdate {
	thu.mutation.SetUpdatedAt(t)
	return thu
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (thu *TaskHistoryUpdate) SetTaskID(id int) *TaskHistoryUpdate {
	thu.mutation.SetTaskID(id)
	return thu
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (thu *TaskHistoryUpdate) SetNillableTaskID(id *int) *TaskHistoryUpdate {
	if id != nil {
		thu = thu.SetTaskID(*id)
	}
	return thu
}

// SetTask sets the "task" edge to the Task entity.
func (thu *TaskHistoryUpdate) SetTask(t *Task) *TaskHistoryUpdate {
	return thu.SetTaskID(t.ID)
}

// Mutation returns the TaskHistoryMutation object of the builder.
func (thu *TaskHistoryUpdate) Mutation() *TaskHistoryMutation {
	return thu.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (thu *TaskHistoryUpdate) ClearTask() *TaskHistoryUpdate {
	thu.mutation.ClearTask()
	return thu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (thu *TaskHistoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	thu.defaults()
	if len(thu.hooks) == 0 {
		affected, err = thu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			thu.mutation = mutation
			affected, err = thu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(thu.hooks) - 1; i >= 0; i-- {
			if thu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = thu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, thu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (thu *TaskHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := thu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (thu *TaskHistoryUpdate) Exec(ctx context.Context) error {
	_, err := thu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thu *TaskHistoryUpdate) ExecX(ctx context.Context) {
	if err := thu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (thu *TaskHistoryUpdate) defaults() {
	if _, ok := thu.mutation.UpdatedAt(); !ok {
		v := taskhistory.UpdateDefaultUpdatedAt()
		thu.mutation.SetUpdatedAt(v)
	}
}

func (thu *TaskHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskhistory.Table,
			Columns: taskhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: taskhistory.FieldID,
			},
		},
	}
	if ps := thu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := thu.mutation.Error(); ok {
		_spec.SetField(taskhistory.FieldError, field.TypeString, value)
	}
	if thu.mutation.ErrorCleared() {
		_spec.ClearField(taskhistory.FieldError, field.TypeString)
	}
	if value, ok := thu.mutation.CreatedAt(); ok {
		_spec.SetField(taskhistory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := thu.mutation.UpdatedAt(); ok {
		_spec.SetField(taskhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if thu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskhistory.TaskTable,
			Columns: []string{taskhistory.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := thu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskhistory.TaskTable,
			Columns: []string{taskhistory.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, thu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TaskHistoryUpdateOne is the builder for updating a single TaskHistory entity.
type TaskHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskHistoryMutation
}

// SetError sets the "error" field.
func (thuo *TaskHistoryUpdateOne) SetError(s string) *TaskHistoryUpdateOne {
	thuo.mutation.SetError(s)
	return thuo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (thuo *TaskHistoryUpdateOne) SetNillableError(s *string) *TaskHistoryUpdateOne {
	if s != nil {
		thuo.SetError(*s)
	}
	return thuo
}

// ClearError clears the value of the "error" field.
func (thuo *TaskHistoryUpdateOne) ClearError() *TaskHistoryUpdateOne {
	thuo.mutation.ClearError()
	return thuo
}

// SetCreatedAt sets the "created_at" field.
func (thuo *TaskHistoryUpdateOne) SetCreatedAt(t time.Time) *TaskHistoryUpdateOne {
	thuo.mutation.SetCreatedAt(t)
	return thuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (thuo *TaskHistoryUpdateOne) SetNillableCreatedAt(t *time.Time) *TaskHistoryUpdateOne {
	if t != nil {
		thuo.SetCreatedAt(*t)
	}
	return thuo
}

// SetUpdatedAt sets the "updated_at" field.
func (thuo *TaskHistoryUpdateOne) SetUpdatedAt(t time.Time) *TaskHistoryUpdateOne {
	thuo.mutation.SetUpdatedAt(t)
	return thuo
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (thuo *TaskHistoryUpdateOne) SetTaskID(id int) *TaskHistoryUpdateOne {
	thuo.mutation.SetTaskID(id)
	return thuo
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (thuo *TaskHistoryUpdateOne) SetNillableTaskID(id *int) *TaskHistoryUpdateOne {
	if id != nil {
		thuo = thuo.SetTaskID(*id)
	}
	return thuo
}

// SetTask sets the "task" edge to the Task entity.
func (thuo *TaskHistoryUpdateOne) SetTask(t *Task) *TaskHistoryUpdateOne {
	return thuo.SetTaskID(t.ID)
}

// Mutation returns the TaskHistoryMutation object of the builder.
func (thuo *TaskHistoryUpdateOne) Mutation() *TaskHistoryMutation {
	return thuo.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (thuo *TaskHistoryUpdateOne) ClearTask() *TaskHistoryUpdateOne {
	thuo.mutation.ClearTask()
	return thuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (thuo *TaskHistoryUpdateOne) Select(field string, fields ...string) *TaskHistoryUpdateOne {
	thuo.fields = append([]string{field}, fields...)
	return thuo
}

// Save executes the query and returns the updated TaskHistory entity.
func (thuo *TaskHistoryUpdateOne) Save(ctx context.Context) (*TaskHistory, error) {
	var (
		err  error
		node *TaskHistory
	)
	thuo.defaults()
	if len(thuo.hooks) == 0 {
		node, err = thuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			thuo.mutation = mutation
			node, err = thuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(thuo.hooks) - 1; i >= 0; i-- {
			if thuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = thuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, thuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TaskHistory)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TaskHistoryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (thuo *TaskHistoryUpdateOne) SaveX(ctx context.Context) *TaskHistory {
	node, err := thuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (thuo *TaskHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := thuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thuo *TaskHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := thuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (thuo *TaskHistoryUpdateOne) defaults() {
	if _, ok := thuo.mutation.UpdatedAt(); !ok {
		v := taskhistory.UpdateDefaultUpdatedAt()
		thuo.mutation.SetUpdatedAt(v)
	}
}

func (thuo *TaskHistoryUpdateOne) sqlSave(ctx context.Context) (_node *TaskHistory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskhistory.Table,
			Columns: taskhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: taskhistory.FieldID,
			},
		},
	}
	id, ok := thuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := thuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskhistory.FieldID)
		for _, f := range fields {
			if !taskhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taskhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := thuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := thuo.mutation.Error(); ok {
		_spec.SetField(taskhistory.FieldError, field.TypeString, value)
	}
	if thuo.mutation.ErrorCleared() {
		_spec.ClearField(taskhistory.FieldError, field.TypeString)
	}
	if value, ok := thuo.mutation.CreatedAt(); ok {
		_spec.SetField(taskhistory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := thuo.mutation.UpdatedAt(); ok {
		_spec.SetField(taskhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if thuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskhistory.TaskTable,
			Columns: []string{taskhistory.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := thuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskhistory.TaskTable,
			Columns: []string{taskhistory.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskHistory{config: thuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, thuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
